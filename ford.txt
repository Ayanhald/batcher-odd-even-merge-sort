// Ford Fulkarson
#include <iostream>
#include <queue>
#include <limits.h>

using namespace std;

#define V 6

bool bfs(int residualGraph[V][V], int s, int t, int parent[])
{
    enum Color
    {
        WHITE,
        GRAY,
        BLACK
    };
    Color color[V];
    for (int i = 0; i < V; ++i)
        color[i] = WHITE;

    queue<int> q;
    q.push(s);
    color[s] = GRAY;
    parent[s] = -1;

    while (!q.empty())
    {
        int u = q.front();
        q.pop();

        for (int v = 0; v < V; ++v)
        {
            if (color[v] == WHITE && residualGraph[u][v] > 0)
            {
                q.push(v);
                parent[v] = u;
                color[v] = GRAY;
            }
        }
        color[u] = BLACK;
    }
    return color[t] == BLACK;
}

int fordFulkerson(int graph[V][V], int source, int sink)
{
    int residualGraph[V][V];
    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            residualGraph[i][j] = graph[i][j];
        }
    }
    int parent[V];
    int maxFlow = 0;

    while (bfs(residualGraph, source, sink, parent))
    {
        int pathFlow = INT_MAX;
        for (int v = sink; v != source; v = parent[v])
        {
            int u = parent[v];
            pathFlow = min(pathFlow, residualGraph[u][v]);
        }

        for (int v = sink; v != source; v = parent[v])
        {
            int u = parent[v];
            residualGraph[u][v] -= pathFlow;
            residualGraph[v][u] += pathFlow;
        }

        maxFlow += pathFlow;
    }

    return maxFlow;
}

int main()
{
    int graph[V][V] = {
        {0, 16, 13, 0, 0, 0},
        {0, 0, 10, 12, 0, 0},
        {0, 4, 0, 0, 14, 0},
        {0, 0, 9, 0, 0, 20},
        {0, 0, 0, 7, 0, 4},
        {0, 0, 0, 0, 0, 0}};

    int source = 0;
    int sink = 5;
    cout << "The maximum possible flow is " << fordFulkerson(graph, source, sink) << endl;
    return 0;
}